generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  IDEA
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  ABANDONED
}

model Project {
  id           Int            @id @default(autoincrement())
  title        String
  description  String
  slug         String         @unique
  imageUrl     String?
  status       ProjectStatus  @default(IDEA)
  liveDemoUrl  String?
  githubUrl    String?
  technologies String[]
  languages    String[]
  featured     Boolean        @default(false)
  startDate    DateTime?
  endDate      DateTime?
  category     String?
  testimonial  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  likes       ProjectLike[]
  comments    Comment[]
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  passwordHash  String
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projectLikes  ProjectLike[]
  comments      Comment[]
  commentLikes  CommentLike[]
}

model ProjectLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  isLike    Boolean 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId]) 
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  userId    Int
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  likes CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  isLike    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}